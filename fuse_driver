#!/usr/bin/python

import os
import sys
import errno
import time
import stat
import fuse
import socket
import threading

fuse.fuse_python_api = (0, 2)

class VFSocket():
   def __init__(self):
      self.lock = threading.Lock()
      self.socks = {}

   def read(self, sock):
      result = ""
      while not ">" in result:
         result += sock.recv(4096)
      return result.replace(">", "").strip()
 
   def execute(self, cmd):
      key = threading.current_thread().name

      # get socket
      sock = None
      self.lock.acquire()
      if key in self.socks:
         sock = self.socks[key]
      self.lock.release()

      # new connections
      if sock is None:
         print 'started thread: ' + key
         sock = socket.socket()
         sock.connect((socket.gethostname(), 8000))
         self.read(sock)
         self.lock.acquire()
         self.socks[key] = sock
         self.lock.release()

      sock.send(cmd)
      result = self.read(sock)
      print 'send: ' + cmd + '\nrecv: ', result
      return result

class VFS(fuse.Fuse):
   def __init__(self, *args, **kw):
      fuse.Fuse.__init__(self, *args, **kw)
      self.sock = VFSocket()
      print 'finished'

   def sexecute(self, cmd):
      return self.sock.execute(cmd)

   def getattr(self, path):
      node = self.sexecute('type ' + path)
      if node.startswith('NOSUCHFILE'):
         return - errno.ENOENT

      st = fuse.Stat()
      if node.startswith('file'):
         st.st_mode = stat.S_IFREG | 0666
         st.st_nlink = 1
         st.st_size = long(self.sexecute('cat ' + path).split()[2])
      else:
         st.st_mode = stat.S_IFDIR | 0755
         st.st_nlink = 2
         st.st_size = 4096
      return st

   def readdir(self, path, flags):
      files = self.sexecute('ls ' + path).splitlines()
      for e in files:
         yield fuse.Direntry(e)

   def mkdir(self, path, mode):
      self.sexecute('mkdir ' + path) 
      return 0

   def mknod(self, path, mode, dev):
      self.sexecute('create ' + path + ' 0') 
      return 0

   def open(self, path, flags):
      if self.sexecute('type ' + path).startswith('file'):
         return 0
      return - errno.ENOENT

   def release(self, path, flags):
      return 0
      
   def read(self, path, size, offset):
      content = self.sexecute('cat ' + path)
      try:
         offset += content.index('\n') + 1
      except:
         pass
      return content[offset:]

   def write(self, path, buf, offset):
      self.sexecute('update path ' + str(len(buf)) + '\n' + buf);
      return len(buf)

if __name__ == '__main__':
   fs = VFS()
   fs.parse(errex=1)
   fs.main()

