#!/usr/bin/python

import os
import sys
import errno
import time
import stat
import fuse
import socket
import threading

fuse.fuse_python_api = (0, 2)

def current_time():
   return int(time.time())

class Node():
   def __init__(self, nodetype, name, size, content, subnodes):
      self.nodetype = nodetype
      self.name = name
      self.size = size
      self.content = content
      self.subnodes = subnodes
      self.time = current_time()

   def valid(self):
      return self.nodetype >= 0

   def invalid(self):
      return self.nodetype < 0

class Cache():
   def __init__(self):
      self.nodes = {}
      self.lock = threading.Lock()

   def get(self, path):
      current = current_time()

      node = None
      self.lock.acquire()
      if path in self.nodes:
         node = self.nodes[path]
         if current - node.time > 10:
            del self.nodes[path]
            node = None
      self.lock.release()
      return node

   def add(self, path, node):
      self.lock.acquire()
      self.nodes[path] = node
      self.lock.release()

   def remove(self, path, maxage):
      self.lock.acquire()
      if path in self.nodes:
         node = self.nodes[path]
         if current_time() - node.time >= maxage:
            del self.nodes[path]
      self.lock.release()
   

class VFSocket():
   def __init__(self):
      self.lock = threading.Lock()
      self.sock = socket.socket()
      self.sock.connect(('localhost', 8000))
      self.read(self.sock)

   def read(self, sock):
      result = ""
      while not ">" in result:
         result += sock.recv(4096)
      return result.replace(">", "").strip()
 
   def execute(self, cmd):
      self.lock.acquire()
      print 'send: ' + cmd
      self.sock.send(cmd)
      result = self.read(self.sock)
      print 'recv: ', result
      self.lock.release()
      return result

   def update(self, cmd):
      self.lock.acquire()
      self.sock.send(cmd)
      self.lock.release()
      print 'send: ' + cmd


class VFS(fuse.Fuse):
   def __init__(self, *args, **kw):
      fuse.Fuse.__init__(self, *args, **kw)
      self.sock = VFSocket()
      self.cache = Cache()
      print 'finished'

   def getnode(self, path):
      node = self.cache.get(path)
      if node is not None:
         return node

      node = Node(-1, path, 0, "", [])
      nodetype = self.sexecute('type ' + path)
      if nodetype.startswith('file'):
         content = self.sexecute('cat ' + path)
         size = len(content)
         try:
            offset = content.index("\n") + 1
            content = content[offset:]
            size = len(content)
         except:
            pass
         node = Node(nodetype, path, size, content, [])
      elif nodetype.startswith('directory'):
         subnodes = self.sexecute('ls ' + path).strip()
         subnodes = subnodes.splitlines()[1:]
         node = Node(nodetype, path, 4096, '', subnodes)
      self.cache.add(path, node)
      return node

   def sexecute(self, cmd):
      return self.sock.execute(cmd)

   def getattr(self, path):
      node = self.getnode(path)
      if node.invalid():
         return - errno.ENOENT

      st = fuse.Stat()
      st.st_size = node.size
      if node.nodetype.startswith('file'):
         st.st_mode = stat.S_IFREG | 0666
         st.st_nlink = 1
      else:
         st.st_mode = stat.S_IFDIR | 0755
         st.st_nlink = 2
      return st

   def readdir(self, path, flags):
      #subnodes = self.sexecute('ls ' + path).splitlines()
      self.cache.remove(path, 1)
      node = self.getnode(path)
      if node.valid():
         for e in node.subnodes:
            yield fuse.Direntry(e)

   def mkdir(self, path, mode):
      self.sexecute('mkdir ' + path) 
      self.cache.remove(path, 0)
      return 0

   def mknod(self, path, mode, dev):
      self.sexecute('create ' + path + ' 0') 
      self.cache.remove(path, 0)
      return 0

   def open(self, path, flags):
      self.cache.remove(path, 5)
      node = self.getnode(path)
      if node.valid() and node.nodetype.startswith('file'):
         return 0
      return - errno.ENOENT

   def release(self, path, flags):
      return 0
      
   def read(self, path, size, offset):
      self.cache.remove(path, 2)
      node = self.getnode(path)
      if node.invalid():
         return ''
      return node.content

   def write(self, path, buf, offset):
      #self.sexecute('update ' + path + ' ' + str(len(str(buf))) + '\r\n' + str(buf));
      self.sock.update('update ' + path + ' ' + str(len(str(buf))) + '\n');
      self.sexecute(str(buf));
      self.cache.remove(path, 0)
      return len(buf)

   def rename(self, pathfrom, pathto):
      self.sexecute('rm ' + pathto)
      self.sexecute('mv ' + pathfrom + ' ' + pathto)
      self.cache.remove(pathfrom, 0)
      self.cache.remove(pathto, 0)

   def truncate(self, path, size):
      node = self.getnode(path)
      node.content.ljust(size)[:size]
      self.write(path, node.content, 0)
      self.cache.remove(path, 0)
      return 0

   def unlink(self, path):
      self.sexecute('rm ' + path)
      self.cache.remove(path, 0)

   def rmdir(self, path):
      self.sexecute('rm ' + path)
      self.cache.remove(path, 0)

   def utime(self, path, mode):
      return 0

   def fsync(self, path, isfsyncfile):
      self.cache.remove(path, 0)
      return 0

if __name__ == '__main__':
   fs = VFS()
   fs.parse(errex=1)
   fs.main()

