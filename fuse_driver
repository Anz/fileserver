#!/usr/bin/python

import os
import sys
import errno
import time
import stat
import fuse
import socket
import threading

fuse.fuse_python_api = (0, 2)

class VFS(fuse.Fuse):
   def __init__(self, *args, **kw):
      fuse.Fuse.__init__(self, *args, **kw)
      self.sconnect()
      print 'finished'

   def sconnect(self):
      self.sock_lock = threading.Lock()
      self.sock_lock.acquire()
      self.sock = socket.socket()
      self.sock.connect((socket.gethostname(), 8000))
      self.sread()
      self.sock_lock.release()

   def sread(self):
      result = ""
      while not ">" in result:
         result += self.sock.recv(4096)
      return result.replace(">", "").strip()
 

   def sexecute(self, cmd):
      self.sock_lock.acquire()
      self.sock.send(cmd)
      print 'send: ', cmd
      result = self.sread()
      print 'recv: ', result
      self.sock_lock.release()
      return result


   def getattr(self, path):
      if self.sexecute('ls ' + path).startswith('NOSUCHFILE'):
         return - errno.ENOENT

      st = fuse.Stat()
      st.st_mode = stat.S_IFDIR | 0755
      st.st_nlink = 2
      st.st_atime = int(time.time())
      st.st_mtime = st.st_atime
      st.st_ctime = st.st_atime
      return st

   def readdir(self, path, flags):
      files = self.sexecute('ls ' + path).splitlines()
      for e in files:
         yield fuse.Direntry(e)

   def mkdir(self, path, mode):
      self.sexecute('mkdir ' + path) 
      return 0

   def mknod(self, path, mode, dev):
      self.sexecute('create ' + path + ' 0') 
      return 0

   def open(self, path, flags):
      print 'open: ', path, flags
      return 0

   def release(self, path, flags):
      print 'open: ', path, flags
      return 0
      

if __name__ == '__main__':
   fs = VFS()
   fs.parse(errex=1)
   fs.main()

